/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 .\bearingv2.glb 
*/

import React, { useState, useContext, useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { TwinsContext } from "@/app/layout";
import { lerp } from "three/src/math/MathUtils";
const lerpColor = require("./lerpColor");

export function Bearing(props) {
  const { twins } = useContext(TwinsContext);
  const { nodes, materials } = useGLTF("/bearingv2.glb");
  const gomillaRef = useRef();
  const bolaRef = useRef();
  const bearingRef = useRef();
  const outerRingRef = useRef();
  let rpmRef = useRef(2000);
  let tempRef = useRef(38);
  let bearingRpmSpecs = 1500;
  // let materialColor = "#CCCCCC";
  let materialColor = getColorForTemperature(tempRef.current); 
  

  useEffect(() => {
    rpmRef.current = twins.simRpm;
    tempRef.current = twins.simTemp;
  }, [twins]);

  useFrame((state, delta) => {
    const t = state.clock.getElapsedTime();
    bolaRef.current.rotation.x += delta * rpmToRadPerSecond(rpmRef.current);

    if (rpmRef.current > bearingRpmSpecs) {
      outerRingRef.current.position.y +=
        (Math.cos(t * 50) * rpmRef.current) / 500000;
      outerRingRef.current.position.z +=
        (Math.sin(t * 50) * rpmRef.current) / 500000;
    } else {
      outerRingRef.current.position.y = 0;
      outerRingRef.current.position.z = 0;
    }

    // if (tempRef.current > 80 && tempRef.current < 180) {
    //   materialColor = "#FF0000";
    // } else {
    //   materialColor = "#CCCCCC";
    // }
  });
  return (
    <group scale={[2.5, 2.5, 2.5]} {...props} dispose={null} ref={bearingRef}>
      <mesh
        geometry={nodes.Aro_externo.geometry}
        material={materials.Metal}
        visible={true}
        ref={outerRingRef}
      />
      <mesh
        geometry={nodes.Aro_interno.geometry}
        material={materials.Metal}
        visible={true}
      />
      <mesh
        geometry={nodes.Gomilla.geometry}
        material={materials.Gomilla}
        ref={gomillaRef}
        visible={false}
      />
      <mesh
        geometry={nodes.Bolas.geometry}
        material={materials.Metal_Bolas}
        material-color={materialColor}
        ref={bolaRef}
         visible={true}
      />
      <mesh
        geometry={nodes.Bronce.geometry}
        material={materials.metalNegro}
        visible={true}
      />
    </group>
  );
}

function rpmToRadPerSecond(rpm) {
  return rpm * ((2 * Math.PI) / 60);
}

function getColorForTemperature(temperature) {
  // Normalizar la temperatura entre 80 y 180
  const normalizedTemperature = (temperature - 80) / (180 - 80);
  console.log(normalizedTemperature);
  let normalizeTemp=clamp(normalizedTemperature, 0, 1);
  
  // Obtener el color interpolado

  return lerpColor("#CCCCCC", "#FF0000", normalizeTemp);
}

function clamp(value, min, max) {
  return Math.min(Math.max(value, min), max);
}

useGLTF.preload("/bearingv2.glb");
